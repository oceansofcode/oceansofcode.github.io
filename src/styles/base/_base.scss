@use "../utils/mixins" as *;
@use "../utils/placeholders" as *;

// Transition styles when changing themes 
body {
  &.color-theme-in-transition,
  &.color-theme-in-transition *,
  &.color-theme-in-transition *:before,
  &.color-theme-in-transition *:after {
    @extend %theme-transition;
  }
}

// Remove all animations, transitions and smooth scroll for people that prefer not to see them
@media (prefers-reduced-motion: reduce) {
  html:focus-within {
   scroll-behavior: auto;
  }
  
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

// Retrieved from https://andy-bell.co.uk/a-modern-css-reset/
// Set core root defaults
html:focus-within {
  scroll-behavior: smooth;
}

// Set core body defaults
body {
  min-height: 100vh;
  text-rendering: optimizeSpeed;
  line-height: 1.5;
}

// Make images easier to work with
img,
picture {
  max-width: 100%;

  &.hidden-image {
    opacity: 0;
  }
}

.hidden {
  display: none;
}

// Reusable flex classes to avoid duplicate css
.flex {
  display: flex;

  &.wrap {
    flex-wrap: wrap;
  }

  &.gap {
    gap: 2.4rem;
  }

  &.justify-center {
    justify-content: center;
  }

  &.align-center {
    align-items: center;
  }

  &.justify-space-between {
    justify-content: space-between;
  }
}

// Used to lazy load sections as part of lazy-loading.ts
.container {
  transition: all 1s ease-in-out;
  opacity: 0;

  &.lazy {
    display: none;
  }

  &.loaded {
    opacity: 1;
  }
}

// Background colors are integral to 3D card transformations but they are often contained in a Web Component's Shadow DOM
// This allows us to apply our theme's background color to the shadow dom and theme transition styling as well.
::part(card-side) {
  @include themeable-property('background-color', 'primary-background');
  @extend %theme-transition;
}

::part(component-button) {
  @include button(75%, 3.5rem);
  @extend %theme-transition;
}