{"version":3,"sourceRoot":"","sources":["file:///home/adam/code/oceansofcode.github.io/src/styles/base/_reset.scss","file:///home/adam/code/oceansofcode.github.io/src/styles/utils/_variables.scss","file:///home/adam/code/oceansofcode.github.io/src/styles/utils/_placeholders.scss","file:///home/adam/code/oceansofcode.github.io/src/styles/sheets/components/experience-card.scss","file:///home/adam/code/oceansofcode.github.io/src/styles/utils/_mixins.scss"],"names":[],"mappings":"AACA,EACE,SACA,UACA,aACA,8BACA,2BACA,sBAGF,EACE,qBCDF,MACI,sBCQJ,aACE,mBACA,oBACA,cDPY,OEZd,MAEI,aACA,YACA,iBACA,eACA,mBAEA,+CACA,0BCoBF,iBACE,qBAGF,gBACE,qBDvBA,qCAXJ,MAYQ,YAMR,WACI,WACA,YACA,kBACA,4BACA,wBAEA,aACI,kBACA,YACA,WACA,2BACA,aAEA,aACA,sBACA,mBAEA,oBACI,gBACA,mBAIR,iBACI,2BAGJ,sBACI,2BAIR,SACI,eAEA,oBACI,gBAIR,OACI,kBAEA,aACI,kBACA,aACA,YAEA,8BACA,0BAEA,mBACI,qBAMR,aACI,kBAIA,sBACI,mBACA,gBACA,kBAEA,8CACI,aAIR,iBACI,iBAGJ,gCACI,gBAIR,uBACI,wBAIR,UACI,0BACA,sBACA,YACI,eACA,WAIR,uBACI,qBAIJ,qCACI,cACI","sourcesContent":["// Reset default browser styles. This should be included in every custom element's shadow DOM.\n* {\n  margin: 0;\n  padding: 0;\n  outline: none;\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n\na {\n  text-decoration: none;\n}","@use 'functions' as *;\n@forward 'functions';\n\n@use 'sass:map';\n@use 'sass:math';\n@use 'sass:color';\n\n$default-opacity:  0.75;\n$header-height: 70px;\n\n:root {\n    --footer-height: 80px;\n}\n\n$side-gap: 15%; // Keeps site aligned better\n$site-radius: 1.2rem;\n\n$dark-theme: 'body.dark &';\n$light-theme: 'body.light &';\n$shadow-dark-theme: ':host(.dark) &';\n$shadow-light-theme: ':host(.light) &';\n\n$themes: (\n    'dark': (\n        'primary-background': hsl(210, 22%, 4%),\n        'secondary-background': hsl(220, 5%, 13%),\n        'primary-text': rgb(232, 230, 227)\n    ),\n    'light': (\n        'primary-background': #FAFAFA,\n        'secondary-background': #e9e9ed,\n        'primary-text': #313441\n    )\n);\n\n// Adds a new property in every theme ending with '-transparent'\n$themes: set-transparent-backgrounds($themes);","@use 'sass:map';\n@use 'variables' as *;\n\n// Create a placeholder for each theme to be used by the theme mixin\n@each $theme, $values in $themes {\n  %body-#{$theme} {\n    background-color: map-get($themes, $theme, 'primary-background');\n  }\n\n  %text-#{$theme} {\n    color: map-get($themes, $theme, 'primary-text');\n  }\n}\n\n%theme-transition {\n  transition: all 750ms;\n  transition-delay: 0ms;\n}\n\n%site-border {\n  border-style: solid;\n  border-width: 0.05rem;\n  border-radius: $site-radius;\n}","@use '../../base/reset';\r\n@use '../../utils/mixins' as *;\r\n\r\n:host {\r\n    @include themeable-property('border-color', 'primary-text');\r\n    padding: 12px;\r\n    width: 350px;\r\n    min-height: 650px;\r\n    max-height: 50%;\r\n    perspective: 1000px;\r\n\r\n    transition-property: translate, filter, transform;\r\n    transition-duration: 400ms;\r\n\r\n    @media screen and (max-width: 500px) {\r\n        width: 100%;\r\n        // min-height: 90%;\r\n    }\r\n}\r\n\r\n// The class name container is used in the base.scss file, but since this is a Shadow DOM style there is no overlap.\r\n.container {\r\n    width: 100%;\r\n    height: 100%;\r\n    position: relative;\r\n    transform-style: preserve-3d;\r\n    transition: transform 1s;\r\n\r\n    >* {\r\n        position: absolute;\r\n        height: 100%;\r\n        width: 100%;\r\n        backface-visibility: hidden;\r\n        padding: 1rem;\r\n        @extend %site-border;\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        \r\n        button {\r\n            margin-top: auto;\r\n            margin-bottom: 2rem;\r\n        }\r\n    }\r\n\r\n    .back {\r\n        transform: rotateY(-180deg);\r\n    }\r\n\r\n    &.is-flipped {\r\n        transform: rotateY(-180deg);\r\n    }\r\n}\r\n\r\nhgroup~* {\r\n    margin-top: 10%;\r\n\r\n    &:last-child {\r\n        margin-top: auto;\r\n    }\r\n}\r\n\r\n.front {\r\n    text-align: center;\r\n\r\n    .logo {\r\n        text-align: center;\r\n        height: 150px;\r\n        width: 150px;\r\n\r\n        transition-property: transform;\r\n        transition-duration: 400ms;\r\n\r\n        &:hover {\r\n            transform: scale(1.1);\r\n        }\r\n    }\r\n}\r\n\r\n.back {\r\n    hgroup {\r\n        text-align: center;\r\n    }\r\n\r\n    details {\r\n        summary {\r\n            margin-bottom: 1rem;\r\n            list-style: none;\r\n            text-align: center;\r\n\r\n            &::-webkit-details-marker {\r\n                display: none;\r\n            }\r\n        }\r\n\r\n        ul {\r\n            margin-left: 2rem;\r\n        }\r\n\r\n        &:not(:first-child) {\r\n            margin-top: 3rem;\r\n        }\r\n    }\r\n\r\n    button.flip-card {\r\n        margin-top: 0 !important;\r\n    }\r\n}\r\n\r\n.inactive {\r\n    cursor: default !important;\r\n    color: grey !important;\r\n    * {\r\n        cursor: inherit;\r\n        color: grey;\r\n    }\r\n}\r\n\r\n::slotted([slot=logo]) {\r\n    border-radius: 100rem;\r\n}\r\n\r\n// Desktop\r\n@media screen and (min-width: 801px) {\r\n    :host(:hover) {\r\n        translate: 0px -2rem;\r\n    }\r\n\r\n    .back details {\r\n        //height: 40%;\r\n    }\r\n}","@use 'variables' as *;\n@use 'placeholders' as *;\n\n@forward 'variables';\n@forward 'placeholders';\n\n// Transition rules when switching from light to dark mode.\n@mixin theme($theme-name) {\n  @extend %body-#{$theme-name};\n\n  $texts: [h1 h2 h3 h4 h5 h6 details summary p a span];\n  @each $textItem in $texts {\n    #{$textItem} {\n      @extend %text-#{$theme-name};\n    }\n  }\n\n  $boxes: [header section footer];\n  @each $box in $boxes {\n    #{$box} {\n      @extend %body-#{$theme-name};\n      @extend %text-#{$theme-name};\n    }\n  }\n\n  header ul {\n    @extend %body-#{$theme-name};\n  }\n}\n\n// Provides both light and dark theming for a property based on the theme-key provided\n@mixin themeable-property($property-name, $theme-key) {\n  #{$light-theme} {\n    #{$property-name}: map-get($themes, 'light', $theme-key);\n  }\n\n  #{$dark-theme} {\n    #{$property-name}: map-get($themes, 'dark', $theme-key);\n  }\n}\n\n// Mixin for the ShadowDOM to be themeable in conjunction with setCustomElementThemeClass\n@mixin shadow-themeable-property($property-name, $theme-key) {\n  #{$shadow-light-theme} {\n    #{$property-name}: map-get($themes, 'light', $theme-key);\n  }\n\n  #{$shadow-dark-theme} {\n    #{$property-name}: map-get($themes, 'dark', $theme-key);\n  }\n}\n\n@mixin button($width, $height) {\n  display: block;\n  font-family: inherit;\n  font-size: inherit;\n  width: $width;\n  height: $height;\n  cursor: pointer;\n  text-align: center;\n  line-height: 2;\n\n  @extend %site-border;\n  \n  @include themeable-property('border-color', 'primary-text');\n  @include themeable-property('color', 'primary-text');\n  @include themeable-property('background-color', 'secondary-background');\n\n  &:hover {\n    @include themeable-property('background-color', 'primary-background');\n  }\n\n}"]}